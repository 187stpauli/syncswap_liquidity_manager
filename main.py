import asyncio
import json
from config.configvalidator import ConfigValidator
from client.client import Client
from pool_actions.add_liquidity import add_liquidity
from pool_actions.burn_liquidity import burn_liquidity
from utils.logger import logger

with open("abi/router_abi.json", "r", encoding="utf-8") as f:
    ROUTER_ABI = json.load(f)

with open("abi/factory_abi.json", "r", encoding="utf-8") as f:
    FACTORY_ABI = json.load(f)

with open("abi/classic_pool_abi.json", "r", encoding="utf-8") as f:
    POOL_ABI = json.load(f)

ZERO_ADDRESS = "0x0000000000000000000000000000000000000000"


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ SyncSwap POOL...\n")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
        validator = ConfigValidator("config/settings.json")
        settings = await validator.validate_config()
        if not settings:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ç—è—Ö
        with open("constants/networks_data.json", "r", encoding="utf-8") as file:
            networks_data = json.load(file)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
        network_name = settings["network"]
        if network_name not in networks_data:
            logger.error(f"–°–µ—Ç—å {network_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ networks_data.json")
            return
            
        network = networks_data[network_name]
        factory_address = network["factory_address"]
        router_address = network["router_address"]

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        with open("constants/tokens.json", "r") as file:
            tokens = json.load(file)

        token_a_symbol = settings["token_a"]
        token_b_symbol = settings["token_b"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if network_name not in tokens:
            logger.error(f"–°–µ—Ç—å {network_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tokens.json")
            return
            
        if token_a_symbol not in tokens[network_name]:
            logger.error(f"–¢–æ–∫–µ–Ω {token_a_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ {network_name}")
            return
            
        if token_b_symbol not in tokens[network_name]:
            logger.error(f"–¢–æ–∫–µ–Ω {token_b_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ {network_name}")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        token_a_address = tokens[network_name][token_a_symbol]
        token_b_address = tokens[network_name][token_b_symbol]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ {network_name}...")
        client = Client(
            token_a_address=token_a_address,
            token_b_address=token_b_address,
            chain_id=network["chain_id"],
            rpc_url=network["rpc_url"],
            private_key=settings["private_key"],
            amount=float(settings["amount"]),
            explorer_url=network["explorer_url"],
            proxy=settings["proxy"]
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã –≤ Wei
        amount_in = await client.to_wei_main(client.amount)
        logger.info(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
        native_balance = await client.get_native_balance()
        native_balance_eth = await client.from_wei_main(native_balance)
        
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {native_balance_eth:.6f} ETH")
        logger.info(f"üí∏ –°—É–º–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª: {client.amount:.6f} ETH\n")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        logger.info("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª...")
        return_dict = await add_liquidity(
            client, 
            amount_in, 
            factory_address, 
            router_address, 
            token_a_address,
            token_b_address, 
            FACTORY_ABI, 
            POOL_ABI, 
            ROUTER_ABI, 
            ZERO_ADDRESS
        )
        
        if not return_dict:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return
            
        # –í—ã–≤–æ–¥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        logger.info("üîÑ –í—ã–≤–æ–¥–∏–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏–∑ –ø—É–ª–∞...")
        result = await burn_liquidity(client, return_dict)
        
        if result:
            logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    asyncio.run(main())
